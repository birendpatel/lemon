/**
 * @file nodes.h
 * @author Copyright (C) 2021 Biren Patel. GNU General Public License v3.0.
 * @brief Abstract syntax tree nodes and their heap init-free functions.
 */

#pragma once

#include <stdbool.h>
#include <stdint.h> //uint64_t

#include "xerror.h"
#include "lib/vector.h"

//node typedefs need to be specified up front due to the large amount of
//circular references. Declarations can contain statements, statements can
//contain declarations, and so on. All AST nodes fit into one of these 5 
//categories.
typedef struct file file;
typedef struct type type;
typedef struct decl decl;
typedef struct stmt stmt;
typedef struct expr expr;

//struct members, i.e., pub x: i32 generates (member) {"x", "i32", true}
//

/*******************************************************************************
 * @struct member
 * @brief Each member of a Lemon struct is a name associated with a type. Public
 * members can be read or written to when outside of the method set.
 ******************************************************************************/
typedef struct member {
	char *name;
	type *typ;
	bool public;
} member;

/*******************************************************************************
 * @struct param
 * @brief Each parameter of a Lemon function is a name associated with a type
 * and a mutability constraint.
 ******************************************************************************/
typedef struct param {
	char *name;
	type *typ;
	bool mutable;
} param;

//vectors contained in various nodes. Since nodes are simple bags of data, the
//user (aka the parser) must implement the actual vector operations.
alias_vector(decl)
declare_vector(decl, decl)

alias_vector(member)
declare_vector(member, member)

alias_vector(param)
declare_vector(param, param)

/*******************************************************************************
 * @struct type
 * @brief Tagged union of type nodes
 * @details Base identifiers are represented as a single type node. Composite
 * types are composed as a linked list and match 1:1 to the recursive grammar 
 * rule for composition.
 ******************************************************************************/
struct type {
	enum {
		NODE_BASE,
		NODE_POINTER,
		NODE_ARRAY,
	} tag;

	union {
		char *base;
		type *pointer;

		struct {
			size_t length;
			type *base;
		} array;
	};
};

/*******************************************************************************
 * @struct decl
 * @brief Tagged union of declaration nodes.
 * @remark Type declarations are named as user-defined types (UDTs) to avoid
 * namespace issues with type nodes.
 ******************************************************************************/
struct decl {
	enum {
		NODE_UDT,
		NODE_FUNCTION,
		NODE_VARIABLE,
		NODE_STATEMENT,
	} tag;

	union {
		struct {
			char *name;
			member_vector members;
			uint32_t line;
			bool public;
		} udt;

		struct {
			char *name;
			type *ret;
			type *recv;
			stmt *block;
			param_vector params;
			uint32_t line;
			bool public;
		} function;

		struct {
			char *name;
			char *type;
			expr *value;
			uint32_t line;
			bool mutable;
		} variable;

		stmt *statement;
	};
};

/*******************************************************************************
 * @struct stmt
 * @brief Tagged union of statement nodes
 * @remark Simple jumps (break, continue, fallthrough) do not have a payload.
 ******************************************************************************/
struct stmt {
	enum {
		NODE_EXPRSTMT,
		NODE_BLOCK,
		NODE_FORLOOP,
		NODE_WHILELOOP,
		NODE_SWITCHSTMT,
		NODE_BRANCH,
		NODE_RETURNSTMT,
		NODE_BREAKSTMT,
		NODE_CONTINUESTMT,
		NODE_GOTOLABEL,
		NODE_FALLTHROUGHSTMT,
	} tag;

	union {
		expr *exprstmt;
		expr *returnstmt;
		char *gotolabel;

		struct {
			decl_vector declarations;
		} block;

		struct {
			enum {
				FOR_DECL,
				FOR_INIT,
			} tag;
			union {
				decl *declaration;
				expr *init;
			};
			expr *cond;
			expr *post;
			stmt *block;
		} forloop;

		struct {
			expr *cond;
			stmt *block;
		} whileloop;

		struct {
			decl *declaration; //may be null if no short decl
			expr *cond;
			stmt *pass;
			stmt *fail;
		} branch;
	};
};

/*******************************************************************************
 * @struct file
 * @brief The root node of every AST generated by the parser is a file node
 * whose children are declaration nodes. The id is simply a unique randomly
 * generated number for differentiating the ASTs of each input file.
 * @details <file> ::= <declaration>* "EOF"
 ******************************************************************************/
struct file {
	uint64_t id;
	decl_vector declarations;
};
