#! /usr/bin/env python3

# kmap.py
# Copyright (C) 2021 Biren Patel. GNU General Public License v3.0.
#
# The C code generated by gperf has a few issues. It triggers the -Wconversion
# error during compilation. It redelcares the struct defined in the kmap API.
# It uses strcmp() which will not work with the scanner's pointer to the
# in-memory source code. And, it doesn't include the string.h header file. This
# script fixes all of these issues.

from subprocess import run

# the code generated by gperf may be different depending on the version so we
# check that gperf is at version 3.1.
def check_gperf() -> None:
    cmd = "gperf --version"
    proc_status = run(cmd, check=True, shell=True, capture_output=True)

    version = proc_status.stdout.decode()

    flag = version.find("3.1", 0, version.find('\n'))

    if flag == -1:
        raise ValueError("gperf is not version 3.1")

# execute gperf on the shell and capture the generated C code from stdout.
# stdout is captured as a python bytes object, hence the decode call.
def exec_gperf() -> str:
    options = "-t -C --null-strings"
    hashname = "--lookup-function-name=kmap_lookup"
    input = "keywords.txt"
    cmd = "gperf {} {} {}".format(options, hashname, input)

    proc_status = run(cmd, check=True, shell=True, capture_output=True)

    return proc_status.stdout.decode()

# include the strings.h header which is required by strncmp and the kmap.h
# API that the ../scanner.c file requires.
def add_include(text: str) -> str:
    str_directive = "#include <string.h>"
    api_directive = "#include \"kmap.h\""

    return "\n\n".join([str_directive, api_directive, text])

# add the pragma preprocessor directives to bypass the -Wconversion error.
def add_diagnostic(text: str) -> str:
    push = "#pragma GCC diagnostic push"
    flag = "#pragma GCC diagnostic ignored \"-Wconversion\""
    pop  = "#pragma GCC diagnostic pop"

    return "\n\n".join([push, flag, text, pop])

# remove struct kv_pair to avoid redefinition from kmap.h.
def remove_struct(text: str) -> str:
    struct = "struct kv_pair { char *name; token_type typ; };"

    return text.replace(struct, "//kv_pair defined in kmap.h")

# exchange strcmp with strncmp and rewrite the logic on the if-branch
def swap_cmp(text: str) -> str:
    old_test = "if (s && *str == *s && !strcmp (str + 1, s + 1))"
    new_test = "if (s && !strncmp(str, s, len))"

    return text.replace(old_test, new_test)

if __name__ == "__main__":
    check_gperf()
    text = exec_gperf()

    pipeline = (add_include, add_diagnostic, remove_struct, swap_cmp)

    for func in pipeline:
        text = func(text)

    #truncate whatever may be in an existing kmap.c file, we don't need
    #the old contents.
    with open("kmap.c", "w") as f:
        f.write(text)
