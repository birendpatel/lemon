/**
 * @file scanner.h
 * @author Copyright (C) 2021 Biren Patel. GNU General Public License v.3.0.
 * @brief Scanner API
 */

#pragma once

#include <stdio.h>

#include "xerror.h"

/*******************************************************************************
 * @struct payload
 * @brief A payload contains the source text that the scanner needs to process
 * and the channel that it may use for communication.
 ******************************************************************************/
typedef struct payload {
	char *src;
	void *chan;
} payload;

/*******************************************************************************
 * @enum 
 * @brief Tagged union type indicator for the token struct.
 ******************************************************************************/
typedef enum token_type {
	EEOF = 0,
	SEMICOLON = 1,
	PLUS = 2,
} token_type;

/*******************************************************************************
 * @struct token
 * @brief Tokens are words generated by the scanner during its lexical analysis
 * of the raw source code.
 ******************************************************************************/
typedef struct token {
	token_type type;
} token;

/*******************************************************************************
 * @fn scanner_spawn
 * @brief This is the scanner start routine. It must be passed to pthread_create
 * when a new thread is spawned for the scanner.
 * @param chan The channel must be initialized prior to this call.
 * @returns NULL
 ******************************************************************************/
void *scanner_spawn(void *data);

/*******************************************************************************
 * @fn token_print
 * @brief Pretty printer
 ******************************************************************************/
xerror token_print(FILE *stream, token t);
