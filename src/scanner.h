/**
 * @file scanner.h
 * @author Copyright (C) 2021 Biren Patel. GNU General Public License v.3.0.
 * @brief Scanner API.
 */

#pragma once

#include <stdio.h>

#include "xerror.h"

/*******************************************************************************
 * @enum token_type 
 * @brief Tagged union type indicator for the token struct.
 ******************************************************************************/
typedef enum token_type {
	//marker tokens
	_EOF = 0,
	_LABEL,		// goto label

	//literals
	_INTLIT,	//-1, 0, 1, ...
	_FLOATLIT,      //-1.0, 0.0, 1.0 ...
	_STRLIT,	//"foo", "bar", ...
	_DISTLIT,	//norm, beta, cauchy, ...

	//delimiters
	_SEMICOLON,	// ;
	_LEFTBRACKET,	// [
	_RIGHTBRACKET	// ]
	_LEFTPAREN,	// (
	_RIGHTPAREN,	// )
	_LEFTBRACE,	// {
	_RIGHTBRACE,	// }
	_DOT,		// .
	_TILDE,		// ~

	//operators
	_EQUAL,		// =
	_EQUALEQUAL,	// ==
	_NOTEQUAL,	// !=
	_NOT,		// !
	_AND,		// &&
	_OR,		// ||
	_BITNOT,	// '
	_BITAND,	// &
	_BITOR,		// |
	_BITXOR,	// ^
	_LSHIFT,	// <<
	_RSHIFT,	// >>
	_GREATER,	// >
	_GEQ,		// >=
	_LESS,		// <
	_LEQ,		// <=
	_ADD,		// +
	_SUB,		// -
	_MULT,		// *
	_DIV,		// /
	_MOD,		// %

	//keywords, control flow
	_FOR,
	_WHILE,
	_BREAK,
	_CONTINUE,
	_IF,
	_ELSE,
	_SWITCH,
	_CASE,
	_FALLTHROUGH,
	_GOTO,
	_ASSERT,

	//keywords, assignment
	_LET,
	_MUT,
	
	//keywords, basic types
	_BOOL,
	_I8,
	_I16,
	_I32,
	_I64,
	_I128,
	_U8,
	_U16,
	_U32,
	_U64,
	_U128,
	_F32,
	_F64,

	//keywords, composite types
	_STR,
	_MAP,
	_ARR,
	_MAT,
	_VEC,
	_RVAR,
	_STRUCT,

	//procedures
	_FUNC,
	_PRIV,
	_PUB,
	_RETURN,
	_VOID,
} token_type;

/*******************************************************************************
 * @struct token
 * @brief Tokens are words generated by the scanner during its lexical analysis
 * of the raw source code.
 ******************************************************************************/
typedef struct token {
	token_type type;
} token;

/*******************************************************************************
 * @fn token_print
 * @brief Pretty printer
 ******************************************************************************/
xerror token_print(FILE *stream, token tok);

/*******************************************************************************
 * @typedef scanner
 * @brief Since the scanner uses a channel, we make its representation opaque.
 * Otherwise we risk the parent thread accidentally modifying the channel
 * attributes without a mutex.
 ******************************************************************************/
typedef struct scanner scanner;

/*******************************************************************************
 * @fn scanner_init
 * @brief Initialize a scanner in a new thread
 ******************************************************************************/
xerror scanner_init(scanner **self, char *src);

/*******************************************************************************
 * @fn scanner_recv
 * @brief Fetch a token, if any, from the front of the communication channel.
 * @details If no token is available and the channel is in a valid open state,
 * then the caller thread will suspend and wait until a token is available. The
 * wait period will not timeout. If the caller receives a token of type _EOF,
 * then this indicates and guarantees that the scanner will no longer send
 * tokens.
 ******************************************************************************/
xerror scanner_recv(scanner *self, token *tok);

/*******************************************************************************
 * @fn scanner_free
 * @brief Terminate the scanner thread, shutdown its communication channel, and
 * release the scanner resource itself.
 * @details This function will fail if the channel is non-empty.
 * @param sfree Free the scanner handle if the parameter is not NULL.
 ******************************************************************************/
xerror scanner_free(scanner self, void (*sfree) (void *ptr));
