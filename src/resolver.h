// Copyright (C) 2021 Biren Patel. GNU General Public License v3.0.
//
// The graph (capital T) is the final IR generated by the compiler frontend and
// represents the source code as a directed acyclic graph of abstract syntax
// trees.

#pragma once

#include <stdbool.h>
#include <stdint.h>

#include "parser.h"
#include "str.h"
#include "map.h"

//------------------------------------------------------------------------------
// The graph is represented as an adjacency list and implemented via a hash
// table using filename keys. An intrusive null-terminated linked list is 
// threaded through the verticies in topological order.
//
// The topological order is defined such that the vertex located at position i 
// in the linked list does not depend on the vertex at position j for 0 <= i < 
// j < len(list). Dependency is determined by the import directives.

typedef struct vertex vertex;
typedef struct graph graph;

struct vertex {
	file *root;
	vertex *next;
	bool active;
};

make_map(vertex, Vertex, static)

struct graph {
	map(Vertex) table;
	vertex *head;
};

//-----------------------------------------------------------------------------
// Graph API
//

typedef struct symbol symbol;
typedef struct symtable symtable;

//------------------------------------------------------------------------------
// symbols are associated with a cstring identifier and placed into a hash table

struct symbol {
	enum {
		SYMBOL_NATIVE,
		SYMBOL_FILE,
		SYMBOL_FUNCTION,
		SYMBOL_METHOD,
		SYMBOL_UDT,
		SYMBOL_VARIABLE,
	} tag;
	union {
		struct {
			size_t bytes;
		} native;

		struct {
			symtable *table;
			bool referenced;
		} file;

		struct {
			symtable *table;
			bool referenced;
		} function;

		struct {
			symtable *table;
			bool referenced;
		} method;

		struct {
			symtable *table;
			size_t bytes;
			bool referenced;
		} udt;

		struct {
			bool referenced;
			bool parameter;
		};
	};
};

make_map(symbol, Symbol, static)

//------------------------------------------------------------------------------
// symbol tables are lexically scoped; all symbol tables in memory together
// form an n-ary tree which is threaded intrusively through each table via
// the symtable.parent and symbol.union.table references.

struct symtable {
	enum {
		TABLE_GLOBAL,
		TABLE_FILE,
		TABLE_FUNCTION,
		TABLE_METHOD,
		TABLE_UDT,
	} tag;
	symtable *parent;
	map(Symbol) entries;
	union {
		struct {
			bool configured;
		} global;
	};
};
