#! /usr/bin/env python3

# Copyright (C) 2021 Biren Patel. GNU General Public License v3.0.
#
# This script builds the C Lemon compiler in various modes and controls test
# suite and memory leak detection. Invoke the script with one of the following
# arguments. 
#
# (0) debug     : Build with assertions, debug info, and no optimisations. This
#                 is the default if no script arguments are passed.
#
# (1) trace     : Build in debug mode and enable all possible stderr output. Use
#                 "./trace/lemon 2> >(grep -P -A 1 <pattern>)" on bash to find
#                 the relevant output.
#
# (2) release   : Build with optimisations; no trace, no debug, no assertions.
#                 Only use for development to check optimisation bugs such as
#                 register clobbering.
#
# (3) install   : Build in release mode and copy Lemon to config install path.
#
# (4) uninstall : Remove Lemon from config install path.
#
# (5) clean     : Remove files created by modes 0 thru 2; does not uninstall

from subprocess import run 
from sys import argv
from os import system, remove

#-------------------------------------------------------------------------------
# configurable makefile parameters

compiler = "gcc"
executable_name = "lemon"
debug = "debug"
release = "release"
trace = "trace"
install_path = "/usr/local/bin"

files = [
    "./src/main.c",
    "./src/scanner.c",
    "./src/parser.c",
    "./src/symtable.c",
    "./src/resolver.c",
    "./src/utils/xerror.c",
    "./src/utils/options.c",
    "./src/utils/file.c",
    "./src/utils/arena.c",
    "./src/assets/kmap.c",
    "./extern/cexception/CException.c"
]

library_flags = [
    "-lpthread"
]

include_flags = [
    "-I./src/",
    "-I./src/assets",
    "-I./src/lib",
    "-I./src/utils",
    "-I./extern/cexception"
]

common_flags = [
    *include_flags,
    "-std=gnu17",
    "-Wall",
    "-Wextra",
    "-Werror",
    "-Wpedantic",
    "-Wconversion",
    "-Wcast-qual",
    "-Wnull-dereference",
    "-Wdouble-promotion",
    "-DCOLOURS",
    "-Wno-unused-function"
]

debug_flags = [
    "-ggdb",
    "-O0",
]

trace_flags = [
    *debug_flags,
    "-DXERROR_DEBUG",
    "-DARENA_TRACE",
    "-DMAP_TRACE",
    "-DVECTOR_TRACE",
    "-DCHANNEL_TRACE"
]

release_flags = [
    "-O3",
    "-march=native"
]

#-------------------------------------------------------------------------------
# makefile templates

preamble = """\
CC = {0}
CFLAGS = {1}
"""

mode = """\
.PHONY: {0} {0}_deps

{0}: CFLAGS += {1}
{0}: {0}_deps ./{0}/lemon
\t@echo "\\nbuild finished successfully."
\t@echo "Lemon was compiled in {0} mode."

{0}_deps:
\t@mkdir -p ./{0}
"""

clean = """\
.PHONY: clean

clean:
\t@rm -rf ./{0} ./{1} ./{2}
\t@echo "directories cleaned"
"""

install = """\
.PHONY: install uninstall

install: {0}
\tcp ./{0}/{1} {2}
\t@echo "\\nLemon installed successfully."

uninstall:
\trm -f {2}/{1}
\t@echo "\\nLemon uninstalled successfully."
"""

#-------------------------------------------------------------------------------
# create build rules for each mode; essentially the makefile tools and functions
# like vpath, addprefix, etc are replaced by brute force python.

def build(target: str) -> str:
    if target == debug:
        script = mode.format(debug, ' '.join(debug_flags))
    elif target == release:
        script = mode.format(release, ' '.join(release_flags))
    elif target == trace:
        script = mode.format(trace, ' '.join(trace_flags))
    else:
        ValueError("invalid target: {}".format(target))

    for file in files:
        script += create_object_rule(target, file)

    script += create_exe_rule(target, script)

    return script

#create a makefile rule for the input C source file
def create_object_rule(target: str, file: str) -> str:
    command = "gcc -MM {} {}".format(file, ' '.join(include_flags))

    result = run(command, check=True, shell=True, capture_output=True)

    print(result.stdout.decode())

    directory = "./{}/".format(target)
    prerequisites = result.stdout.decode()
    recipe = "\n\t$(CC) $(CFLAGS) -c -o $@ $<\n\n"

    return directory + prerequisites + recipe

#create a makefile rule for the GNU linker; the input script must contain
#all required object file recipes
def create_exe_rule(target: str, script: str) -> str:
    directory = "./{}/{} : ".format(target, executable_name)
    prerequisites = get_linker_prerequisites(script)
    recipe = "\n\t$(CC) -o $@ $^ {}\n\n".format(' '.join(library_flags))

    return directory + prerequisites + recipe

#finds all object-file paths within the input string
def get_linker_prerequisites(script: str) -> str:
    objects = []
    pattern = ".o:"
    tokens = script.split()

    for word in tokens:
        tail = word[-3:]

        if tail == pattern:
            word_no_colon = word[:-1]

            objects.append(word_no_colon)

    return ' '.join(objects)

#-------------------------------------------------------------------------------
# temporarily create a makefile on disk, invoke it with a rule, and then delete
# it. This guarantees that file dependencies are always up to date and prevents
# end users from accidentally using a stale build configuration.
#
# os.system is used because generates real-time build messages from the makefile
# and preserves the colour output from gcc. This is harder to accomplish via
# the subprocess and pty modules.

def get_rule() -> str:
    argc = len(argv)
    err = None

    if argc == 1:
        return "debug"
    elif argc == 2:
        return argv[1]
    else:
        raise ValueError("more than one rule provided")

def create_script() -> str:
    makefile = ""

    makefile += preamble.format(compiler, ' '.join(common_flags))
    makefile += build(debug)
    makefile += build(trace)
    makefile += build(release)
    makefile += install.format(release, executable_name, install_path)
    makefile += clean.format(debug, trace, release)

    return makefile

if __name__ == "__main__":
    command = "make {}".format(get_rule())
    script = create_script()

    with open("makefile", mode='w') as file:
        file.write(script)

    system(command)
    remove("makefile")
